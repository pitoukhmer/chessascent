// This file is generated by Firebase Studio.
'use server';

/**
 * @fileOverview AI move suggestions during chess tutorials.
 *
 * - getMoveSuggestion - Provides AI-powered move suggestions for a given chess position.
 * - MoveSuggestionInput - The input type for the getMoveSuggestion function.
 * - MoveSuggestionOutput - The return type for the getMoveSuggestion function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const MoveSuggestionInputSchema = z.object({
  fen: z.string().describe('The current board state in Forsythâ€“Edwards Notation (FEN).'),
  moveHistory: z.string().describe('the history of moves of the current game'),
  tutorialStep: z.string().describe('Current step of the tutorial'),
});
export type MoveSuggestionInput = z.infer<typeof MoveSuggestionInputSchema>;

const MoveSuggestionOutputSchema = z.object({
  move: z.string().describe('The suggested move in algebraic notation.'),
  explanation: z.string().describe('The AI explanation for the suggested move.'),
});
export type MoveSuggestionOutput = z.infer<typeof MoveSuggestionOutputSchema>;

export async function getMoveSuggestion(input: MoveSuggestionInput): Promise<MoveSuggestionOutput> {
  return getMoveSuggestionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'moveSuggestionPrompt',
  input: {schema: MoveSuggestionInputSchema},
  output: {schema: MoveSuggestionOutputSchema},
  prompt: `You are a chess grandmaster providing move suggestions during a chess tutorial.

  Current tutorial step: {{{tutorialStep}}}
  
  Given the current board state in FEN notation: {{{fen}}}
  and the move history: {{{moveHistory}}},

  Suggest the best move for the player and explain your reasoning.
  Ensure the move is in algebraic notation.
  Make sure to account for the tutorial step when suggesting moves.

  Output the move and explanation in JSON format.
  `,
});

const getMoveSuggestionFlow = ai.defineFlow(
  {
    name: 'getMoveSuggestionFlow',
    inputSchema: MoveSuggestionInputSchema,
    outputSchema: MoveSuggestionOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
